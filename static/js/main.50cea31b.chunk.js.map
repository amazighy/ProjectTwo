{"version":3,"sources":["stackData.csv","baData.csv","useResizeObserver.js","RacingBarChart.js","StackedAreaChart.js","StackedBarChart.js","useInterval.js","App.js","index.js"],"names":["module","exports","useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","RacingBarChart","data","svgRef","useRef","wrapperRef","svg","select","getBoundingClientRect","width","height","yScale","scaleBand","paddingInner","domain","map","value","index","range","xScale","scaleLinear","max","selectAll","name","join","enter","append","attr","color","bandwidth","transition","text","Code","Math","round","className","style","marginBottom","StackedBarChart","keys","colors","layers","stack","order","stackOrderAscending","stackGenerator","extent","layer","sequence","scalePoint","d","year","areaGenerator","area","x","y0","y1","curve","curveCardinal","key","yAxis","axisLeft","tickFormat","format","call","remove","padding","paddingOuter","xAxis","axisBottom","tickSize","Fragment","useInterval","callback","delay","savedCallback","id","setInterval","clearInterval","Brazil","China","India","allKeys","k","push","App","iteration","setIteration","start","setStart","setKeys","stackData","setStackData","barData","setBarData","Data","setData","Promise","all","csv","stackDat","baData","then","sort","a","b","console","log","intialData","filter","catch","err","filteredData","onClick","type","checked","includes","e","target","Array","from","Set","_key","htmlFor","background","StackedAreaChart","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50cea31b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stackData.be06f672.csv\";","module.exports = __webpack_public_path__ + \"static/media/baData.9911f9f4.csv\";","import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import React, { useRef, useEffect } from \"react\";\nimport { select, scaleBand, scaleLinear, max } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\nfunction RacingBarChart({ data }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const { width, height } =\n      dimensions || svgRef.current.getBoundingClientRect();\n\n    let magic = width - width / 1.665;\n    \n\n    \n\n    const yScale = scaleBand()\n      .paddingInner(0.1)\n      .domain(data.map((value, index) => index))\n      .range([0, height]);\n\n    const xScale = scaleLinear()\n      .domain([0, max(data, (entry) => entry.value)])\n      .range([0, width]);\n\n    svg\n      .selectAll(\".bar\")\n      .data(data, (entry, index) => entry.name)\n      .join((enter) =>\n        enter.append(\"rect\").attr(\"y\", (entry, index) => yScale(index))\n      )\n      .attr(\"fill\", (entry) => entry.color)\n      .attr(\"class\", \"bar\")\n      .attr(\"x\", 0)\n      .attr(\"height\", yScale.bandwidth())\n      .transition()\n      .attr(\"width\", (entry) => xScale(entry.value))\n      .attr(\"y\", (entry, index) => yScale(index));\n\n    svg\n      .selectAll(\".label\")\n      .data(data, (entry, index) => entry.name)\n      .join((enter) =>\n        enter\n          .append(\"text\")\n          .attr(\n            \"y\",\n            (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5\n          )\n      )\n      .text((entry) => ` ${entry.Code}  \\u00A0\\u00A0 ${Math.round(entry.value/1000000) } M`)\n      .attr(\"class\", \"label\")\n      .attr(\"x\", 10)\n      .transition()\n      .attr(\"y\", (entry, index) => yScale(index) + yScale.bandwidth() / 2 + 5);\n  }, [data, dimensions]);\n\n  return (\n    <div  className='raceDiv' ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      <svg  className='raceChart' ref={svgRef}></svg>\n    </div>\n  );\n}\n\nexport default RacingBarChart;\n","import React, { useEffect, useRef } from \"react\";\n\nimport {\n  select,\n  stack,\n  max,\n  scaleLinear,\n  axisLeft,\n  stackOrderAscending,\n  area,\n  scalePoint,\n  format,\n  curveCardinal\n} from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Component that renders a StackedBarChart\n */\n\nfunction StackedBarChart({ data, keys, colors }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // stacks / layers\n    const stackGenerator = stack()\n      .keys(keys)\n      .order(stackOrderAscending);\n    const layers = stackGenerator(data);\n    const extent = [\n      0,\n      max(layers, layer => max(layer, sequence => sequence[1]))\n    ];\n\n    // scales\n    const xScale = scalePoint()\n      .domain(data.map(d => d.year))\n      .range([0, width]);\n\n    const yScale = scaleLinear()\n      .domain(extent)\n      .range([height, 0]);\n\n    // area generator\n    const areaGenerator = area()\n      .x(sequence => xScale(sequence.data.year))\n      .y0(sequence => yScale(sequence[0]))\n      .y1(sequence => yScale(sequence[1]))\n      .curve(curveCardinal);\n\n    // rendering\n    svg\n      .selectAll(\".layer\")\n      .data(layers)\n      .join(\"path\")\n      .attr(\"class\", \"layer\")\n      .attr(\"fill\", layer => colors[layer.key])\n      .attr(\"d\", areaGenerator);\n\n    // axes\n    // const xAxis = axisBottom(xScale)\n    // ;\n    // svg\n    //   .select(\".x-axis\")\n    //   .attr(\"transform\", `translate(0, ${height})`)\n    //   .call(xAxis)\n    //   .selectAll('.domain')\n    //   .remove();\n\n    //   ;\n\n    const yAxis = axisLeft(yScale)\n    .tickFormat(format(\".2s\"));\n    svg.select(\".y-axis\").call(yAxis)\n    .selectAll('.domain, .tick line')\n    .remove();\n  }, [colors, data, dimensions, keys]);\n\n\n  return (\n   \n      \n      <div className='AreaDiv'  ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n      \n        <svg className='AreaChart' ref={svgRef}>\n          <g className=\"x-axis\" />\n          <g className=\"y-axis\" />\n          \n        </svg>\n       \n      </div>\n      \n   \n  );\n}\n\nexport default StackedBarChart;\n","import React, { useEffect, useRef } from \"react\";\nimport {\n  select,\n  scaleBand,\n  axisBottom,\n  stack,\n  max,\n  scaleLinear,\n  axisLeft,\n  stackOrderAscending,\n  format,\n} from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Component that renders a StackedBarChart\n */\n\nfunction StackedBarChart({ data, keys, colors }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // stacks / layers\n    const stackGenerator = stack().keys(keys).order(stackOrderAscending);\n    const layers = stackGenerator(data);\n    const extent = [\n      0,\n      max(layers, (layer) => max(layer, (sequence) => sequence[1])),\n    ];\n\n    // scales\n    const xScale = scaleBand()\n      .domain(data.map((d) => d.year))\n      .range([0, width])\n      .padding(0.25)\n      .paddingOuter(0);\n\n    const yScale = scaleLinear().domain(extent).range([height, 0]);\n\n    // rendering\n    svg\n      .selectAll(\".layer\")\n      .data(layers)\n      .join(\"g\")\n      .attr(\"class\", \"layer\")\n      .attr(\"fill\", (layer) => colors[layer.key])\n      .selectAll(\"rect\")\n      .data((layer) => layer)\n      .join(\"rect\")\n      .attr(\"x\", (sequence) => xScale(sequence.data.year))\n      .attr(\"width\", xScale.bandwidth())\n      .attr(\"y\", (sequence) => yScale(sequence[1]))\n      .attr(\"height\", (sequence) => yScale(sequence[0]) - yScale(sequence[1]));\n\n    // axes\n    const xAxis = axisBottom(xScale);\n    svg\n      .select(\".x-axis\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(xAxis)\n      .selectAll(\".domain, .tick line\")\n      .remove();\n\n    const yAxis = axisLeft(yScale).tickFormat(format(\".2s\")).tickSize(-width);\n    svg.select(\".y-axis\").call(yAxis).selectAll(\".domain\").remove();\n  }, [colors, data, dimensions, keys]);\n\n  return (\n    <React.Fragment>\n      <div\n        className='AreaDiv'\n        ref={wrapperRef}\n        style={{ marginBottom: \"2rem\" }}\n      >\n        <svg className=\"AreaChart\" ref={svgRef}>\n          <g className=\"x-axis\" />\n          <g className=\"y-axis\" />\n        </svg>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default StackedBarChart;\n","import { useEffect, useRef } from \"react\";\n\n/**\n * Hook, that makes setInterval work with functional components.\n */\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;\n","import React, { useState, useEffect } from \"react\";\nimport { csv } from \"d3\";\nimport RacingBarChart from \"./RacingBarChart\";\nimport StackedAreaChart from \"./StackedAreaChart\";\nimport StackedBarChart from \"./StackedBarChart\";\nimport useInterval from \"./useInterval\";\n\nimport stackDat from \"./stackData.csv\";\nimport baData from \"./baData.csv\";\n\nimport \"./App.css\";\n\nconst colors = {\n  \"North America\": \"#131F2C\",\n  \"Latin America\": \"#086D8C\",\n  \"M-East & N-Africa\": \"#34A195\",\n  \"S-Saha Africa\": \"#F2EA0F\",\n  \"South Asia\": \"#FC1F71\",\n  \"European Union\": \"#ED4E3B\",\n  \"OECD members\": \"#C6AC7D\",\n  \"United States\": \"#85BB7E\",\n  Brazil: \"#D04168\",\n  \"United Kingdom\": \"#660E10\",\n  China: \"#B5BBED\",\n  India: \"#0CCDED\",\n};\n\nconst allKeys = [];\nfor (var k in colors) {\n  allKeys.push(k);\n}\n\nfunction App() {\n  const [iteration, setIteration] = useState(2000);\n  const [start, setStart] = useState(false);\n  const [keys, setKeys] = useState(allKeys);\n  const [stackData, setStackData] = useState([]);\n  const [barData, setBarData] = useState([]);\n  const [Data, setData] = useState([]);\n\n  useEffect(() => {\n    Promise.all([csv(stackDat), csv(baData)])\n      .then(([stackData, barData]) => {\n        barData.forEach((d) => {\n          d.year = +d.year;\n        });\n\n        setStackData(stackData);\n        setData(barData);\n        barData.sort((a, b) => b.value - a.value);\n        console.log(barData);\n        const intialData = [...barData].filter((d) => d.year === 2017);\n        setBarData(intialData);\n      })\n      .catch(function (err) {\n        throw err;\n      });\n  }, []);\n\n  useInterval(() => {\n    if (start) {\n      console.log(iteration);\n      if (iteration === 2017) {\n        setIteration(2000);\n      } else {\n        const filteredData = [...Data].filter((d) => d.year === iteration);\n        // debugger\n\n        setBarData(filteredData);\n\n        setIteration(iteration + 1);\n      }\n    }\n  }, 1000);\n\n  return (\n    <React.Fragment>\n      <h3>Annual total CO₂ emissions, by country, 2000 to 2017</h3>\n      <RacingBarChart data={barData} />\n\n      <p className=\"iteration\"> {iteration}</p>\n\n      <button className=\"butRace\" onClick={() => setStart(!start)}>\n        {start ? \"Stop Animation\" : \"Start Animation!\"}\n      </button>\n\n      <h3>Annual total CO₂ emissions, reagion, 2000 to 2017 </h3>\n      \n\n      <div className=\"fields\">\n        {allKeys.map((key) => (\n          <label key={key} className=\"container\">\n            <input\n              id={key}\n              type=\"checkbox\"\n              checked=\"checked\"\n              checked={keys.includes(key)}\n              onChange={(e) => {\n                if (e.target.checked) {\n                  setKeys(Array.from(new Set([...keys, key])));\n                } else {\n                  setKeys(keys.filter((_key) => _key !== key));\n                }\n              }}\n            />\n\n            <span\n              className=\"checkmark\"\n              htmlFor={key}\n              style={{ background: colors[key] }}\n            ></span>\n            <div className=\"text-names\">{key}</div>\n          </label>\n        ))}\n      </div>\n      <StackedAreaChart data={stackData} keys={keys} colors={colors} />\n      <StackedBarChart data={stackData} keys={keys} colors={colors} />\n      <h5>Data Sources: World Bank Development Indicators</h5>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}